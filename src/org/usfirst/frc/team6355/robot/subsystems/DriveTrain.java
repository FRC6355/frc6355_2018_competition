// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team6355.robot.subsystems;

import org.usfirst.frc.team6355.robot.RobotMap;
//import org.usfirst.frc.team6355.robot.commands.*;

//import edu.wpi.first.wpilibj.DriverStation;
//import edu.wpi.first.wpilibj.Joystick;
//import edu.wpi.first.wpilibj.Joystick.AxisType;
//import edu.wpi.first.wpilibj.PIDController;
//import edu.wpi.first.wpilibj.PIDOutput;
//import edu.wpi.first.wpilibj.PIDSource;
//import edu.wpi.first.wpilibj.PIDSourceType;
//import edu.wpi.first.wpilibj.RobotDrive;
//import edu.wpi.first.wpilibj.SpeedController;
//import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.command.Subsystem;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
//import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class DriveTrain extends Subsystem {
	// These constants adjust the behavior of the PIDController

	// This PIDController provides feedback on how far off we are from
	// the desired angle. Used for driving straight or turning to a desired
	// angle.
//	private final SpeedController leftFrontSpeedControler = RobotMap.driveTrainLeftFrontSpeedControler;
//	private final SpeedController leftRearSpeedControler = RobotMap.driveTrainLeftRearSpeedControler;
//	private final SpeedController rightFrontSpeedControler = RobotMap.driveTrainRightFrontSpeedControler;
//	private final SpeedController rightRearSpeedControler = RobotMap.driveTrainRightRearSpeedControler;
//	private final RobotDrive robotDrive4 = RobotMap.driveTrainRobotDrive4;

	public DriveTrain() {
	}

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// Set the default command for a subsystem here.
		// This command is the one that will be active when no other commands
		// require the subsystem.
//		setDefaultCommand(new DriveWithJoystickComand());
	}


	public void Drive(double speed, double rotation)
	{
	    RobotMap.differentialDrive.arcadeDrive(speed, rotation);
	}
	
	
	/*
	 * Stops the drive motion and disables the turn correction.
	 */
	public void Stop() {
	    RobotMap.differentialDrive.arcadeDrive(0.0, 0.0);
	}

	
	public double getLeftWheelDistance(){
		return RobotMap.left_encoder.getDistance();
	}
	
	public double getRightWheelDistance(){
		return RobotMap.right_encoder.getDistance();
	}
	
	public double getWheelDistanceAverage(){
		// This is only meaningful for smaller values of distance, and if it's been reset recently.
		return (getLeftWheelDistance() + getRightWheelDistance()) / 2.0;
	}
	
	public void resetDistanceMeasures(){
		RobotMap.left_encoder.reset();
		RobotMap.right_encoder.reset();
	}

}
